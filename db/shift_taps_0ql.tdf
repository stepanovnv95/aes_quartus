--altshift_taps CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="APEX20KE" NUMBER_OF_TAPS=1 TAP_DISTANCE=3 WIDTH=48 clock shiftin taps CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 8.1 cbx_altdpram 2008:05:19:10:27:12:SJ cbx_altshift_taps 2008:05:19:11:04:47:SJ cbx_altsyncram 2008:08:26:11:57:11:SJ cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_lpm_add_sub 2008:05:19:10:49:01:SJ cbx_lpm_compare 2008:09:01:07:44:05:SJ cbx_lpm_counter 2008:05:19:10:42:20:SJ cbx_lpm_decode 2008:05:19:10:39:27:SJ cbx_lpm_mux 2008:05:19:10:30:36:SJ cbx_mgl 2008:08:08:15:16:18:SJ cbx_stratix 2008:08:05:17:10:23:SJ cbx_stratixii 2008:08:07:13:54:47:SJ cbx_stratixiii 2008:07:11:13:32:02:SJ cbx_util_mgl 2008:07:18:09:58:54:SJ  VERSION_END


-- Copyright (C) 1991-2008 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION altdpram (aclr, byteena[WIDTH_BYTEENA-1..0], data[WIDTH-1..0], inclock, inclocken, outclock, outclocken, rdaddress[WIDTHAD-1..0], rdaddressstall, rden, wraddress[WIDTHAD-1..0], wraddressstall, wren)
WITH ( BYTE_SIZE, INDATA_ACLR, INDATA_REG, LPM_FILE, lpm_hint, MAXIMUM_DEPTH, NUMWORDS, OUTDATA_ACLR, OUTDATA_REG, RAM_BLOCK_TYPE, RDADDRESS_ACLR, RDADDRESS_REG, RDCONTROL_ACLR, RDCONTROL_REG, READ_DURING_WRITE_MODE_MIXED_PORTS, USE_EAB, WIDTH, WIDTH_BYTEENA = 1, WIDTHAD, WRADDRESS_ACLR, WRADDRESS_REG, WRCONTROL_ACLR, WRCONTROL_REG)
RETURNS ( q[WIDTH-1..0]);
FUNCTION add_sub_hnd (dataa[1..0], datab[1..0])
RETURNS ( result[1..0]);
FUNCTION lpm_counter (aclr, aload, aset, cin, clk_en, clock, cnt_en, data[LPM_WIDTH-1..0], sclr, sload, sset, updown)
WITH ( lpm_avalue, lpm_direction, lpm_modulus, lpm_port_updown, lpm_pvalue, lpm_svalue, lpm_width)
RETURNS ( cout, eq[15..0], q[LPM_WIDTH-1..0]);

--synthesis_resources = altdpram 1 lpm_counter 1 lut 2 
SUBDESIGN shift_taps_0ql
( 
	clock	:	input;
	shiftin[47..0]	:	input;
	shiftout[47..0]	:	output;
	taps[47..0]	:	output;
) 
VARIABLE 
	dpram4 : altdpram
		WITH (
			INDATA_REG = "INCLOCK",
			NUMWORDS = 3,
			OUTDATA_REG = "OUTCLOCK",
			RDADDRESS_REG = "INCLOCK",
			RDCONTROL_REG = "INCLOCK",
			WIDTH = 48,
			WIDTHAD = 2,
			WRADDRESS_REG = "INCLOCK",
			WRCONTROL_REG = "INCLOCK"
		);
	dffe3a[1..0] : dffe;
	add_sub2 : add_sub_hnd;
	cntr1 : lpm_counter
		WITH (
			lpm_direction = "UP",
			lpm_modulus = 3,
			lpm_port_updown = "PORT_UNUSED",
			lpm_width = 2
		);
	clken	: NODE;
	rdaddress[1..0]	: WIRE;

BEGIN 
	dpram4.data[] = ( shiftin[]);
	dpram4.inclock = clock;
	dpram4.inclocken = clken;
	dpram4.outclock = clock;
	dpram4.outclocken = clken;
	dpram4.rdaddress[] = rdaddress[];
	dpram4.wraddress[] = cntr1.q[];
	dpram4.wren = B"1";
	dffe3a[].clk = clock;
	dffe3a[].d = ( (! add_sub2.result[1..1]), add_sub2.result[0..0]);
	dffe3a[].ena = clken;
	add_sub2.dataa[] = cntr1.q[];
	add_sub2.datab[] = B"00";
	cntr1.clk_en = clken;
	cntr1.clock = clock;
	clken = VCC;
	rdaddress[] = ( (! dffe3a[1..1].q), dffe3a[0..0].q);
	shiftout[47..0] = dpram4.q[47..0];
	taps[] = dpram4.q[];
END;
--VALID FILE
